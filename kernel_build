#!/bin/bash

#KERNEL_MAKE_ENV="LOCALVERSION=-ksu-v0.7.1"

#sudo apt update
#sudo apt install -y git wget make bc bison openssl curl zip kmod cpio flex libelf-dev libssl-dev libtfm-dev dwarves device-tree-compiler ca-certificates xz-utils python3 python2

PARENT_DIR=`readlink -f ..`
OUT_DIR=`readlink -f .`/out
CLANG_VERSION=r498229b

if [ ! -d $PARENT_DIR/clang-aosp ]; then
    echo 'Clone Android Clang/LLVM Prebuilts'
    wget -O $PARENT_DIR/clang-$CLANG_VERSION.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-$CLANG_VERSION.tar.gz
    mkdir $PARENT_DIR/clang-aosp
    tar -C $PARENT_DIR/clang-aosp/ -zxvf $PARENT_DIR/clang-$CLANG_VERSION.tar.gz
    rm -rf $PARENT_DIR/clang-$CLANG_VERSION.tar.gz
fi

if [ ! -d $PARENT_DIR/build-tools ]; then
    echo 'Clone prebuilt binaries of build tools'
    git clone --depth 1 https://android.googlesource.com/platform/prebuilts/build-tools $PARENT_DIR/build-tools
fi

if [ ! -d $PARENT_DIR/kernel-build-tools ]; then
    echo 'Clone prebuilt binaries of kernel build tools'
    git clone --depth 1 https://android.googlesource.com/kernel/prebuilts/build-tools $PARENT_DIR/kernel-build-tools
fi

cflags+="-I${PARENT_DIR}/kernel-build-tools/linux-x86/include "
ldflags+="-Wl,-rpath,${PARENT_DIR}/kernel-build-tools/linux-x86/lib64 "
ldflags+="-L ${PARENT_DIR}/kernel-build-tools/linux-x86/lib64 "
ldflags+="-fuse-ld=lld --rtlib=compiler-rt"
export HOSTCFLAGS="$cflags"
export HOSTLDFLAGS="$ldflags"
export PATH=$PARENT_DIR/clang-aosp/bin:$PATH
export PATH=$PARENT_DIR/build-tools/path/linux-x86:$PATH
export PATH=$PARENT_DIR/kernel-build-tools/linux-x86/bin:$PATH
export LLVM=1 LLVM_IAS=1
export ARCH=arm64
export TARGET_SOC=kalama

make O=$(pwd)/out $KERNEL_MAKE_ENV kalama-gki_defconfig
make -j$(nproc --all) O=$(pwd)/out $KERNEL_MAKE_ENV
